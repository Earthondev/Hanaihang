import { useState, useEffect } from 'react';
import { collection, onSnapshot, query, orderBy } from 'firebase/firestore';
import { db } from '../config/firebase';
import { Mall } from '../types/mall-system';

/**
 * Hook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≤‡∏á‡πÅ‡∏ö‡∏ö real-time
 * ‡πÉ‡∏ä‡πâ onSnapshot ‡πÄ‡∏û‡∏∑‡πà‡∏≠ listen ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 */
export function useRealtimeMalls() {
  const [malls, setMalls] = useState<Mall[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    console.log('üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô real-time listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡πâ‡∏≤‡∏á...');
    console.log('üîß Firebase config projectId:', db.app.options.projectId);
    
    const q = query(collection(db, 'malls'), orderBy('displayName'));
    
    const unsubscribe = onSnapshot(
      q,
      (snapshot) => {
        console.log('üì° ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á:', snapshot.size, '‡∏´‡πâ‡∏≤‡∏á');
        console.log('üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≤‡∏á:', snapshot.docs.map(doc => doc.data().displayName).join(', '));
        
        const mallsData: Mall[] = [];
        snapshot.forEach((doc) => {
          const data = doc.data();
          mallsData.push({
            id: doc.id,
            ...data,
            // Convert timestamps
            createdAt: data.createdAt?.toDate?.() || data.createdAt,
            updatedAt: data.updatedAt?.toDate?.() || data.updatedAt,
          } as Mall);
        });
        
        console.log('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï state ‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', mallsData.length, '‡∏´‡πâ‡∏≤‡∏á');
        setMalls(mallsData);
        setLoading(false);
        setError(null);
        
        console.log('‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', mallsData.length, '‡∏´‡πâ‡∏≤‡∏á');
      },
      (error) => {
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ listen ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≤‡∏á:', error);
        console.error('‚ùå Error details:', error);
        setError(error.message);
        setLoading(false);
      }
    );

    // Cleanup listener on unmount
    return () => {
      console.log('üßπ ‡∏õ‡∏¥‡∏î real-time listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡πâ‡∏≤‡∏á');
      unsubscribe();
    };
  }, []);

  return { malls, loading, error };
}

/**
 * Hook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÅ‡∏ö‡∏ö real-time
 */
export function useRealtimeMall(mallId: string) {
  const [mall, setMall] = useState<Mall | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (!mallId) {
      setMall(null);
      setLoading(false);
      return;
    }

    console.log('üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô real-time listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡πâ‡∏≤‡∏á:', mallId);
    
    const q = query(collection(db, 'malls'), orderBy('displayName'));
    
    const unsubscribe = onSnapshot(
      q,
      (snapshot) => {
        const mallDoc = snapshot.docs.find(doc => doc.id === mallId);
        
        if (mallDoc) {
          const data = mallDoc.data();
          setMall({
            id: mallDoc.id,
            ...data,
            // Convert timestamps
            createdAt: data.createdAt?.toDate?.() || data.createdAt,
            updatedAt: data.updatedAt?.toDate?.() || data.updatedAt,
          } as Mall);
          setError(null);
        } else {
          setMall(null);
          setError('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≤‡∏á');
        }
        
        setLoading(false);
        console.log('‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', mallId);
      },
      (error) => {
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ listen ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≤‡∏á:', error);
        setError(error.message);
        setLoading(false);
      }
    );

    // Cleanup listener on unmount
    return () => {
      console.log('üßπ ‡∏õ‡∏¥‡∏î real-time listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡πâ‡∏≤‡∏á:', mallId);
      unsubscribe();
    };
  }, [mallId]);

  return { mall, loading, error };
}
