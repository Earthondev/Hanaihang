import React, { useState, useEffect } from 'react';
import {
  LayoutDashboard,
  Store,
  Building,
  Tag,
  Calendar,
  Settings,
  Plus,
  Search,
  Filter,
  MoreVertical,
  Edit,
  Trash2,
  Eye,
  EyeOff,
  TrendingUp,
  Users,
  ShoppingBag,
  MapPin
} from 'lucide-react';
import { useAuth } from '../contexts/AuthContext';
import { firebaseFirestore } from '../services/firebaseFirestore';

interface SectionData {
  title: string;
  subtitle: string;
}

interface StoreData {
  id: string;
  name: string;
  phone: string;
  category: string;
  location: string;
  status: string;
  hours: string;
  color: string;
  textColor: string;
}

interface MallData {
  id: string;
  name: string;
  address: string;
  status: string;
  stores: string;
  anchors: string;
  color: string;
  textColor: string;
}

interface FloorData {
  id: string;
  name: string;
  mallName: string;
  storeCount: number;
  status: string;
  color: string;
  textColor: string;
}

interface PromotionData {
  id: string;
  title: string;
  mallName: string;
  status: string;
  dateRange: string;
  color: string;
  textColor: string;
}

interface EventData {
  id: string;
  title: string;
  mallName: string;
  status: string;
  dateRange: string;
  color: string;
  textColor: string;
}

const AdminPanel: React.FC = () => {
  const [activeSection, setActiveSection] = useState('stores');
  const [showAddStoreModal, setShowAddStoreModal] = useState(false);
  const [showAddMallModal, setShowAddMallModal] = useState(false);
  const [editMode, setEditMode] = useState(false);
  const [publishStatus, setPublishStatus] = useState<'draft' | 'publishing' | 'live'>('draft');
  
  // Data states
  const [stores, setStores] = useState<StoreData[]>([]);
  const [malls, setMalls] = useState<MallData[]>([]);
  const [floors, setFloors] = useState<FloorData[]>([]);
  const [promotions, setPromotions] = useState<PromotionData[]>([]);
  const [events, setEvents] = useState<EventData[]>([]);
  
  // Loading states
  const [loading, setLoading] = useState(true);
  const [loadingMalls, setLoadingMalls] = useState(false);
  const [loadingFloors, setLoadingFloors] = useState(false);
  const [loadingPromotions, setLoadingPromotions] = useState(false);
  const [loadingEvents, setLoadingEvents] = useState(false);

  const { user, logout } = useAuth();

  // Mall form state
  const [mallForm, setMallForm] = useState({
    name: '',
    nameEN: '',
    address: '',
    district: '',
    province: '',
    postcode: '',
    phone: '',
    website: '',
    hours: { open: '10:00', close: '22:00' },
    weight: 0,
    order: 0,
    published: false,
    featured: false,
    investment: '',
    area: '',
    parking: '',
    shops: '',
    anchors: [] as string[],
    contact: { phone: '', email: '', website: '' },
    socials: { facebook: '', instagram: '', line: '' },
    about: ''
  });

  const handleMallFormChange = (field: string, value: any) => {
    setMallForm(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleAddMall = async () => {
    try {
      const newMall = {
        ...mallForm,
        coords: { lat: 0, lng: 0 }, // Default coordinates
        createdAt: new Date(),
        updatedAt: new Date()
      };
      
      // Add to Firestore
      await firebaseFirestore.createMall(newMall);
      
      // Reset form and close modal
      setMallForm({
        name: '',
        nameEN: '',
        address: '',
        district: '',
        province: '',
        postcode: '',
        phone: '',
        website: '',
        hours: { open: '10:00', close: '22:00' },
        weight: 0,
        order: 0,
        published: false,
        featured: false,
        investment: '',
        area: '',
        parking: '',
        shops: '',
        anchors: [],
        contact: { phone: '', email: '', website: '' },
        socials: { facebook: '', instagram: '', line: '' },
        about: ''
      });
      setShowAddMallModal(false);
      
      // Reload malls data
      const firestoreMalls = await firebaseFirestore.getMalls();
      const transformedMalls: MallData[] = firestoreMalls.map((mall, index) => ({
        id: mall.id || `mall-${index}`,
        name: mall.name,
        address: mall.address,
        status: mall.published ? 'Published' : 'Draft',
        stores: mall.shops,
        anchors: `${mall.anchors.length} anchors`,
        color: index % 3 === 0 ? 'bg-blue-100' : index % 3 === 1 ? 'bg-green-100' : 'bg-purple-100',
        textColor: index % 3 === 0 ? 'text-blue-600' : index % 3 === 1 ? 'text-green-600' : 'text-purple-600'
      }));
      setMalls(transformedMalls);
    } catch (error) {
      console.error('Error adding mall:', error);
      alert('เกิดข้อผิดพลาดในการเพิ่มห้าง');
    }
  };

  // Load data based on active section
  useEffect(() => {
    const loadData = async () => {
      try {
        console.log('🔄 Loading data for section:', activeSection);
        
        switch (activeSection) {
          case 'stores':
            setLoading(true);
            const firestoreStores = await firebaseFirestore.getStores();
            console.log('📊 Stores loaded:', firestoreStores.length);
            const transformedStores: StoreData[] = firestoreStores.map((store, index) => ({
              id: store.id || `store-${index}`,
              name: store.name,
              phone: store.phone,
              category: store.category,
              location: `Floor ${store.floor}, Unit ${store.unit}`,
              status: store.status === 'active' ? 'Active' : 'Inactive',
              hours: store.hours,
              color: index % 3 === 0 ? 'bg-gray-100' : index % 3 === 1 ? 'bg-red-100' : 'bg-pink-100',
              textColor: index % 3 === 0 ? 'text-gray-600' : index % 3 === 1 ? 'text-red-600' : 'text-pink-600'
            }));
            setStores(transformedStores);
            setLoading(false);
            break;
            
          case 'malls':
            setLoadingMalls(true);
            const firestoreMalls = await firebaseFirestore.getMalls();
            console.log('📊 Malls loaded:', firestoreMalls.length, firestoreMalls);
            const transformedMalls: MallData[] = firestoreMalls.map((mall, index) => ({
              id: mall.id || `mall-${index}`,
              name: mall.name,
              address: mall.address,
              status: mall.published ? 'Published' : 'Draft',
              stores: mall.shops || '0',
              anchors: `${mall.anchors?.length || 0} anchors`,
              color: index % 3 === 0 ? 'bg-blue-100' : index % 3 === 1 ? 'bg-green-100' : 'bg-purple-100',
              textColor: index % 3 === 0 ? 'text-blue-600' : index % 3 === 1 ? 'text-green-600' : 'text-purple-600'
            }));
            setMalls(transformedMalls);
            setLoadingMalls(false);
            break;
            
          case 'floors':
            setLoadingFloors(true);
            const firestoreFloors = await firebaseFirestore.getFloors();
            console.log('📊 Floors loaded:', firestoreFloors.length);
            const transformedFloors: FloorData[] = firestoreFloors.map((floor, index) => ({
              id: floor.id || `floor-${index}`,
              name: floor.name,
              mallName: floor.mallId, // TODO: Get mall name from mallId
              storeCount: floor.storeCount,
              status: floor.published ? 'Published' : 'Draft',
              color: index % 3 === 0 ? 'bg-yellow-100' : index % 3 === 1 ? 'bg-orange-100' : 'bg-indigo-100',
              textColor: index % 3 === 0 ? 'text-yellow-600' : index % 3 === 1 ? 'text-orange-600' : 'text-indigo-600'
            }));
            setFloors(transformedFloors);
            setLoadingFloors(false);
            break;
            
          case 'promotions':
            setLoadingPromotions(true);
            const firestorePromotions = await firebaseFirestore.getPromotions();
            console.log('📊 Promotions loaded:', firestorePromotions.length);
            const transformedPromotions: PromotionData[] = firestorePromotions.map((promotion, index) => ({
              id: promotion.id || `promotion-${index}`,
              title: promotion.title,
              mallName: promotion.mallId, // TODO: Get mall name from mallId
              status: promotion.status === 'active' ? 'Active' : promotion.status === 'scheduled' ? 'Scheduled' : 'Draft',
              dateRange: `${promotion.startDate} - ${promotion.endDate}`,
              color: index % 3 === 0 ? 'bg-pink-100' : index % 3 === 1 ? 'bg-cyan-100' : 'bg-lime-100',
              textColor: index % 3 === 0 ? 'text-pink-600' : index % 3 === 1 ? 'text-cyan-600' : 'text-lime-600'
            }));
            setPromotions(transformedPromotions);
            setLoadingPromotions(false);
            break;
            
          case 'events':
            setLoadingEvents(true);
            const firestoreEvents = await firebaseFirestore.getEvents();
            console.log('📊 Events loaded:', firestoreEvents.length);
            const transformedEvents: EventData[] = firestoreEvents.map((event, index) => ({
              id: event.id || `event-${index}`,
              title: event.title,
              mallName: event.mallId, // TODO: Get mall name from mallId
              status: event.status === 'active' ? 'Active' : event.status === 'scheduled' ? 'Scheduled' : 'Draft',
              dateRange: `${event.startDate} - ${event.endDate}`,
              color: index % 3 === 0 ? 'bg-violet-100' : index % 3 === 1 ? 'bg-amber-100' : 'bg-emerald-100',
              textColor: index % 3 === 0 ? 'text-violet-600' : index % 3 === 1 ? 'text-amber-600' : 'text-emerald-600'
            }));
            setEvents(transformedEvents);
            setLoadingEvents(false);
            break;
            
          case 'analytics':
            // Analytics data is static for now
            break;
        }
      } catch (error) {
        console.error('❌ Error loading data:', error);
        setLoading(false);
        setLoadingMalls(false);
        setLoadingFloors(false);
        setLoadingPromotions(false);
        setLoadingEvents(false);
      }
    };

    loadData();
  }, [activeSection]);

  // Load initial data when component mounts
  useEffect(() => {
    const loadInitialData = async () => {
      try {
        console.log('🚀 Loading initial data...');
        const firestoreMalls = await firebaseFirestore.getMalls();
        console.log('📊 Initial malls loaded:', firestoreMalls.length, firestoreMalls);
        const transformedMalls: MallData[] = firestoreMalls.map((mall, index) => ({
          id: mall.id || `mall-${index}`,
          name: mall.name,
          address: mall.address,
          status: mall.published ? 'Published' : 'Draft',
          stores: mall.shops || '0',
          anchors: `${mall.anchors?.length || 0} anchors`,
          color: index % 3 === 0 ? 'bg-blue-100' : index % 3 === 1 ? 'bg-green-100' : 'bg-purple-100',
          textColor: index % 3 === 0 ? 'text-blue-600' : index % 3 === 1 ? 'text-green-600' : 'text-purple-600'
        }));
        console.log('🎨 Transformed malls:', transformedMalls);
        setMalls(transformedMalls);
        console.log('✅ Malls state updated');
      } catch (error) {
        console.error('❌ Error loading initial data:', error);
      }
    };

    loadInitialData();
  }, []);

  const sections: { [key: string]: SectionData } = {
    stores: { title: 'Stores', subtitle: 'จัดการร้านค้า' },
    malls: { title: 'Malls', subtitle: 'จัดการห้างสรรพสินค้า' },
    floors: { title: 'Floors', subtitle: 'จัดการชั้น' },
    promotions: { title: 'Promotions', subtitle: 'จัดการโปรโมชัน' },
    events: { title: 'Events', subtitle: 'จัดการอีเวนต์' },
    analytics: { title: 'Analytics', subtitle: 'ดูสถิติ' }
  };

  const renderStoresSection = () => (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold text-gray-900">Stores</h2>
          <p className="text-gray-600">จัดการร้านค้าในระบบ</p>
        </div>
        <button className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg font-medium transition-colors flex items-center space-x-2">
          <Plus className="w-4 h-4" />
          <span>เพิ่มร้านค้า</span>
        </button>
      </div>

      <div className="bg-white rounded-xl shadow-sm border border-gray-200">
        <div className="p-6 border-b border-gray-200">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
                <input
                  type="text"
                  placeholder="ค้นหาร้านค้า..."
                  className="pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-200 focus:border-green-500 outline-none"
                />
              </div>
              <button className="flex items-center space-x-2 text-gray-600 hover:text-gray-900">
                <Filter className="w-4 h-4" />
                <span>Filter</span>
              </button>
            </div>
            <div className="flex items-center space-x-2">
              <span className="text-sm text-gray-500">{stores.length} ร้านค้า</span>
            </div>
          </div>
        </div>

        <div className="overflow-x-auto">
          <table className="w-full">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ร้านค้า</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">หมวดหมู่</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ตำแหน่ง</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">สถานะ</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">เวลาเปิด</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">จัดการ</th>
              </tr>
            </thead>
            <tbody className="divide-y divide-gray-200">
              {loading ? (
                <tr>
                  <td colSpan={6} className="px-6 py-8 text-center">
                    <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto"></div>
                    <p className="text-gray-500 mt-2">กำลังโหลดข้อมูล...</p>
                  </td>
                </tr>
              ) : stores.length === 0 ? (
                <tr>
                  <td colSpan={6} className="px-6 py-8 text-center">
                    <p className="text-gray-500">ไม่พบข้อมูลร้านค้า</p>
                  </td>
                </tr>
              ) : (
                stores.map((store) => (
                  <tr key={store.id} className="hover:bg-gray-50">
                    <td className="py-3 px-6">
                      <div className="flex items-center space-x-3">
                        <div className={`w-8 h-8 ${store.color} rounded-lg flex items-center justify-center`}>
                          <span className={`${store.textColor} font-bold text-sm`}>
                            {store.name.charAt(0)}
                          </span>
                        </div>
                        <div>
                          <div className="font-medium text-text-primary">{store.name}</div>
                          <div className="text-sm text-text-secondary">{store.phone}</div>
                        </div>
                      </div>
                    </td>
                    <td className="py-3 px-6">
                      <span className="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-blue-100 text-blue-800">
                        {store.category}
                      </span>
                    </td>
                    <td className="py-3 px-6 text-sm text-text-secondary">{store.location}</td>
                    <td className="py-3 px-6">
                      <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                        store.status === 'Active'
                          ? 'bg-green-100 text-green-800'
                          : 'bg-red-100 text-red-800'
                      }`}>
                        {store.status}
                      </span>
                    </td>
                    <td className="py-3 px-6 text-sm text-text-secondary">{store.hours}</td>
                    <td className="py-3 px-6">
                      <div className="flex items-center space-x-2">
                        <button className="text-blue-600 hover:text-blue-900">
                          <Edit className="w-4 h-4" />
                        </button>
                        <button className="text-red-600 hover:text-red-900">
                          <Trash2 className="w-4 h-4" />
                        </button>
                      </div>
                    </td>
                  </tr>
                ))
              )}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );

  const renderMallsSection = () => {
    console.log('🎭 Rendering malls section, malls count:', malls.length, malls);
    return (
      <div className="space-y-6">
        <div className="flex items-center justify-between">
          <div>
            <h2 className="text-2xl font-bold text-gray-900">Malls</h2>
            <p className="text-gray-600">จัดการห้างสรรพสินค้า</p>
          </div>
          <button 
            onClick={() => setShowAddMallModal(true)}
            className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg font-medium transition-colors flex items-center space-x-2"
          >
            <Plus className="w-4 h-4" />
            <span>เพิ่มห้าง</span>
          </button>
        </div>

      <div className="bg-white rounded-xl shadow-sm border border-gray-200">
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ห้างสรรพสินค้า</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ที่อยู่</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">สถานะ</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ร้านค้า</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Anchor Stores</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">จัดการ</th>
              </tr>
            </thead>
            <tbody className="divide-y divide-gray-200">
              {loadingMalls ? (
                <tr>
                  <td colSpan={6} className="px-6 py-8 text-center">
                    <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto"></div>
                    <p className="text-gray-500 mt-2">กำลังโหลดข้อมูล...</p>
                  </td>
                </tr>
              ) : malls.length === 0 ? (
                <tr>
                  <td colSpan={6} className="px-6 py-8 text-center">
                    <p className="text-gray-500">ไม่พบข้อมูลห้างสรรพสินค้า</p>
                  </td>
                </tr>
              ) : (
                malls.map((mall) => (
                  <tr key={mall.id} className="hover:bg-gray-50">
                    <td className="py-3 px-6">
                      <div className="flex items-center space-x-3">
                        <div className={`w-8 h-8 ${mall.color} rounded-lg flex items-center justify-center`}>
                          <span className={`${mall.textColor} font-bold text-sm`}>
                            {mall.name.charAt(0)}
                          </span>
                        </div>
                        <div>
                          <div className="font-medium text-text-primary">{mall.name}</div>
                        </div>
                      </div>
                    </td>
                    <td className="py-3 px-6 text-sm text-text-secondary">{mall.address}</td>
                    <td className="py-3 px-6">
                      <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                        mall.status === 'Published'
                          ? 'bg-green-100 text-green-800'
                          : 'bg-yellow-100 text-yellow-800'
                      }`}>
                        {mall.status}
                      </span>
                    </td>
                    <td className="py-3 px-6 text-sm text-text-secondary">{mall.stores}</td>
                    <td className="py-3 px-6 text-sm text-text-secondary">{mall.anchors}</td>
                    <td className="py-3 px-6">
                      <div className="flex items-center space-x-2">
                        <button className="text-blue-600 hover:text-blue-900">
                          <Edit className="w-4 h-4" />
                        </button>
                        <button className="text-red-600 hover:text-red-900">
                          <Trash2 className="w-4 h-4" />
                        </button>
                      </div>
                    </td>
                  </tr>
                ))
              )}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );

  const renderFloorsSection = () => (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold text-gray-900">Floors</h2>
          <p className="text-gray-600">จัดการชั้นของห้างสรรพสินค้า</p>
        </div>
        <button className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg font-medium transition-colors flex items-center space-x-2">
          <Plus className="w-4 h-4" />
          <span>เพิ่มชั้น</span>
        </button>
      </div>

      <div className="bg-white rounded-xl shadow-sm border border-gray-200">
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ชั้น</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ห้างสรรพสินค้า</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">จำนวนร้าน</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">สถานะ</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">จัดการ</th>
              </tr>
            </thead>
            <tbody className="divide-y divide-gray-200">
              {loadingFloors ? (
                <tr>
                  <td colSpan={5} className="px-6 py-8 text-center">
                    <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto"></div>
                    <p className="text-gray-500 mt-2">กำลังโหลดข้อมูล...</p>
                  </td>
                </tr>
              ) : floors.length === 0 ? (
                <tr>
                  <td colSpan={5} className="px-6 py-8 text-center">
                    <p className="text-gray-500">ไม่พบข้อมูลชั้น</p>
                  </td>
                </tr>
              ) : (
                floors.map((floor) => (
                  <tr key={floor.id} className="hover:bg-gray-50">
                    <td className="py-3 px-6">
                      <div className="flex items-center space-x-3">
                        <div className={`w-8 h-8 ${floor.color} rounded-lg flex items-center justify-center`}>
                          <span className={`${floor.textColor} font-bold text-sm`}>
                            {floor.name.charAt(0)}
                          </span>
                        </div>
                        <div>
                          <div className="font-medium text-text-primary">{floor.name}</div>
                        </div>
                      </div>
                    </td>
                    <td className="py-3 px-6 text-sm text-text-secondary">{floor.mallName}</td>
                    <td className="py-3 px-6 text-sm text-text-secondary">{floor.storeCount} ร้าน</td>
                    <td className="py-3 px-6">
                      <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                        floor.status === 'Published'
                          ? 'bg-green-100 text-green-800'
                          : 'bg-yellow-100 text-yellow-800'
                      }`}>
                        {floor.status}
                      </span>
                    </td>
                    <td className="py-3 px-6">
                      <div className="flex items-center space-x-2">
                        <button className="text-blue-600 hover:text-blue-900">
                          <Edit className="w-4 h-4" />
                        </button>
                        <button className="text-red-600 hover:text-red-900">
                          <Trash2 className="w-4 h-4" />
                        </button>
                      </div>
                    </td>
                  </tr>
                ))
              )}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );

  const renderPromotionsSection = () => (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold text-gray-900">Promotions</h2>
          <p className="text-gray-600">จัดการโปรโมชันและแคมเปญ</p>
        </div>
        <button className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg font-medium transition-colors flex items-center space-x-2">
          <Plus className="w-4 h-4" />
          <span>เพิ่มโปรโมชัน</span>
        </button>
      </div>

      <div className="bg-white rounded-xl shadow-sm border border-gray-200">
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">โปรโมชัน</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ห้างสรรพสินค้า</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">สถานะ</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">วันที่</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">จัดการ</th>
              </tr>
            </thead>
            <tbody className="divide-y divide-gray-200">
              {loadingPromotions ? (
                <tr>
                  <td colSpan={5} className="px-6 py-8 text-center">
                    <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto"></div>
                    <p className="text-gray-500 mt-2">กำลังโหลดข้อมูล...</p>
                  </td>
                </tr>
              ) : promotions.length === 0 ? (
                <tr>
                  <td colSpan={5} className="px-6 py-8 text-center">
                    <p className="text-gray-500">ไม่พบข้อมูลโปรโมชัน</p>
                  </td>
                </tr>
              ) : (
                promotions.map((promotion) => (
                  <tr key={promotion.id} className="hover:bg-gray-50">
                    <td className="py-3 px-6">
                      <div className="flex items-center space-x-3">
                        <div className={`w-8 h-8 ${promotion.color} rounded-lg flex items-center justify-center`}>
                          <span className={`${promotion.textColor} font-bold text-sm`}>
                            {promotion.title.charAt(0)}
                          </span>
                        </div>
                        <div>
                          <div className="font-medium text-text-primary">{promotion.title}</div>
                        </div>
                      </div>
                    </td>
                    <td className="py-3 px-6 text-sm text-text-secondary">{promotion.mallName}</td>
                    <td className="py-3 px-6">
                      <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                        promotion.status === 'Active'
                          ? 'bg-green-100 text-green-800'
                          : promotion.status === 'Scheduled'
                          ? 'bg-blue-100 text-blue-800'
                          : 'bg-yellow-100 text-yellow-800'
                      }`}>
                        {promotion.status}
                      </span>
                    </td>
                    <td className="py-3 px-6 text-sm text-text-secondary">{promotion.dateRange}</td>
                    <td className="py-3 px-6">
                      <div className="flex items-center space-x-2">
                        <button className="text-blue-600 hover:text-blue-900">
                          <Edit className="w-4 h-4" />
                        </button>
                        <button className="text-red-600 hover:text-red-900">
                          <Trash2 className="w-4 h-4" />
                        </button>
                      </div>
                    </td>
                  </tr>
                ))
              )}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );

  const renderEventsSection = () => (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold text-gray-900">Events</h2>
          <p className="text-gray-600">จัดการอีเวนต์และกิจกรรม</p>
        </div>
        <button className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg font-medium transition-colors flex items-center space-x-2">
          <Plus className="w-4 h-4" />
          <span>เพิ่มอีเวนต์</span>
        </button>
      </div>

      <div className="bg-white rounded-xl shadow-sm border border-gray-200">
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">อีเวนต์</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ห้างสรรพสินค้า</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">สถานะ</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">วันที่</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">จัดการ</th>
              </tr>
            </thead>
            <tbody className="divide-y divide-gray-200">
              {loadingEvents ? (
                <tr>
                  <td colSpan={5} className="px-6 py-8 text-center">
                    <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto"></div>
                    <p className="text-gray-500 mt-2">กำลังโหลดข้อมูล...</p>
                  </td>
                </tr>
              ) : events.length === 0 ? (
                <tr>
                  <td colSpan={5} className="px-6 py-8 text-center">
                    <p className="text-gray-500">ไม่พบข้อมูลอีเวนต์</p>
                  </td>
                </tr>
              ) : (
                events.map((event) => (
                  <tr key={event.id} className="hover:bg-gray-50">
                    <td className="py-3 px-6">
                      <div className="flex items-center space-x-3">
                        <div className={`w-8 h-8 ${event.color} rounded-lg flex items-center justify-center`}>
                          <span className={`${event.textColor} font-bold text-sm`}>
                            {event.title.charAt(0)}
                          </span>
                        </div>
                        <div>
                          <div className="font-medium text-text-primary">{event.title}</div>
                        </div>
                      </div>
                    </td>
                    <td className="py-3 px-6 text-sm text-text-secondary">{event.mallName}</td>
                    <td className="py-3 px-6">
                      <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                        event.status === 'Active'
                          ? 'bg-green-100 text-green-800'
                          : event.status === 'Scheduled'
                          ? 'bg-blue-100 text-blue-800'
                          : 'bg-yellow-100 text-yellow-800'
                      }`}>
                        {event.status}
                      </span>
                    </td>
                    <td className="py-3 px-6 text-sm text-text-secondary">{event.dateRange}</td>
                    <td className="py-3 px-6">
                      <div className="flex items-center space-x-2">
                        <button className="text-blue-600 hover:text-blue-900">
                          <Edit className="w-4 h-4" />
                        </button>
                        <button className="text-red-600 hover:text-red-900">
                          <Trash2 className="w-4 h-4" />
                        </button>
                      </div>
                    </td>
                  </tr>
                ))
              )}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );

  const renderAnalyticsSection = () => (
    <div className="space-y-6">
      <div>
        <h2 className="text-2xl font-bold text-gray-900">Analytics</h2>
        <p className="text-gray-600">ดูสถิติและข้อมูลการใช้งาน</p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">Total Users</p>
              <p className="text-2xl font-bold text-gray-900">1,234</p>
            </div>
            <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
              <Users className="w-6 h-6 text-blue-600" />
            </div>
          </div>
        </div>

        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">Active Stores</p>
              <p className="text-2xl font-bold text-gray-900">{stores.length}</p>
            </div>
            <div className="w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center">
              <Store className="w-6 h-6 text-green-600" />
            </div>
          </div>
        </div>

        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">Total Malls</p>
              <p className="text-2xl font-bold text-gray-900">{malls.length}</p>
            </div>
            <div className="w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center">
              <Building className="w-6 h-6 text-purple-600" />
            </div>
          </div>
        </div>

        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">Active Promotions</p>
              <p className="text-2xl font-bold text-gray-900">{promotions.filter(p => p.status === 'Active').length}</p>
            </div>
            <div className="w-12 h-12 bg-orange-100 rounded-lg flex items-center justify-center">
              <Tag className="w-6 h-6 text-orange-600" />
            </div>
          </div>
        </div>
      </div>
    </div>
  );

  return (
    <>
      {/* Add Mall Modal */}
      {showAddMallModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-2xl max-h-[90vh] overflow-y-auto">
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-xl font-bold text-gray-900">เพิ่มห้างสรรพสินค้า</h2>
              <button
                onClick={() => setShowAddMallModal(false)}
                className="text-gray-400 hover:text-gray-600"
              >
                <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>

            <div className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">ชื่อห้าง (ภาษาไทย)</label>
                  <input
                    type="text"
                    value={mallForm.name}
                    onChange={(e) => handleMallFormChange('name', e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
                    placeholder="ชื่อห้างสรรพสินค้า"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">ชื่อห้าง (ภาษาอังกฤษ)</label>
                  <input
                    type="text"
                    value={mallForm.nameEN}
                    onChange={(e) => handleMallFormChange('nameEN', e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
                    placeholder="Mall Name"
                  />
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">ที่อยู่</label>
                <input
                  type="text"
                  value={mallForm.address}
                  onChange={(e) => handleMallFormChange('address', e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
                  placeholder="ที่อยู่"
                />
              </div>

              <div className="grid grid-cols-3 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">เขต</label>
                  <input
                    type="text"
                    value={mallForm.district}
                    onChange={(e) => handleMallFormChange('district', e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
                    placeholder="เขต"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">จังหวัด</label>
                  <input
                    type="text"
                    value={mallForm.province}
                    onChange={(e) => handleMallFormChange('province', e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
                    placeholder="จังหวัด"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">รหัสไปรษณีย์</label>
                  <input
                    type="text"
                    value={mallForm.postcode}
                    onChange={(e) => handleMallFormChange('postcode', e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
                    placeholder="รหัสไปรษณีย์"
                  />
                </div>
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">เบอร์โทรศัพท์</label>
                  <input
                    type="text"
                    value={mallForm.phone}
                    onChange={(e) => handleMallFormChange('phone', e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
                    placeholder="เบอร์โทรศัพท์"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">เว็บไซต์</label>
                  <input
                    type="text"
                    value={mallForm.website}
                    onChange={(e) => handleMallFormChange('website', e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
                    placeholder="เว็บไซต์"
                  />
                </div>
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">เวลาเปิด</label>
                  <input
                    type="time"
                    value={mallForm.hours.open}
                    onChange={(e) => handleMallFormChange('hours', { ...mallForm.hours, open: e.target.value })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">เวลาปิด</label>
                  <input
                    type="time"
                    value={mallForm.hours.close}
                    onChange={(e) => handleMallFormChange('hours', { ...mallForm.hours, close: e.target.value })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
                  />
                </div>
              </div>

              <div className="flex items-center space-x-4">
                <label className="flex items-center">
                  <input
                    type="checkbox"
                    checked={mallForm.published}
                    onChange={(e) => handleMallFormChange('published', e.target.checked)}
                    className="rounded border-gray-300 text-green-600 focus:ring-green-500"
                  />
                  <span className="ml-2 text-sm text-gray-700">เผยแพร่</span>
                </label>
                <label className="flex items-center">
                  <input
                    type="checkbox"
                    checked={mallForm.featured}
                    onChange={(e) => handleMallFormChange('featured', e.target.checked)}
                    className="rounded border-gray-300 text-green-600 focus:ring-green-500"
                  />
                  <span className="ml-2 text-sm text-gray-700">แนะนำ</span>
                </label>
              </div>

              <div className="flex justify-end space-x-3 pt-4">
                <button
                  onClick={() => setShowAddMallModal(false)}
                  className="px-4 py-2 text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200 transition-colors"
                >
                  ยกเลิก
                </button>
                <button
                  onClick={handleAddMall}
                  className="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors"
                >
                  เพิ่มห้าง
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      <div className="min-h-screen bg-gray-50">
        {/* Header */}
        <header className="bg-white shadow-sm border-b border-gray-200">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div className="flex items-center justify-between h-16">
              <div className="flex items-center space-x-4">
                <div className="flex items-center space-x-3">
                  <div className="w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center">
                    <Settings className="w-5 h-5 text-green-600" />
                  </div>
                  <h1 className="text-xl font-semibold text-gray-900">Admin Panel</h1>
                </div>
              </div>
              
              <div className="flex items-center space-x-4">
                <div className="flex items-center space-x-2">
                  <div className="w-8 h-8 bg-gray-200 rounded-full flex items-center justify-center">
                    <span className="text-sm font-medium text-gray-700">
                      {user?.email?.charAt(0).toUpperCase()}
                    </span>
                  </div>
                  <span className="text-sm text-gray-700">{user?.email}</span>
                </div>
                <button
                  onClick={logout}
                  className="text-gray-500 hover:text-gray-700 transition-colors"
                >
                  <Settings className="w-5 h-5" />
                </button>
              </div>
            </div>
          </div>
        </header>

        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <div className="flex space-x-8">
            {/* Sidebar */}
            <div className="w-64 flex-shrink-0">
              <nav className="space-y-2">
                {Object.entries(sections).map(([key, section]) => (
                  <button
                    key={key}
                    onClick={() => setActiveSection(key)}
                    className={`w-full flex items-center space-x-3 px-4 py-3 rounded-lg text-left transition-colors ${
                      activeSection === key
                        ? 'bg-green-100 text-green-700 border border-green-200'
                        : 'text-gray-700 hover:bg-gray-100'
                    }`}
                  >
                    {key === 'stores' && <Store className="w-5 h-5" />}
                    {key === 'malls' && <Building className="w-5 h-5" />}
                    {key === 'floors' && <MapPin className="w-5 h-5" />}
                    {key === 'promotions' && <Tag className="w-5 h-5" />}
                    {key === 'events' && <Calendar className="w-5 h-5" />}
                    {key === 'analytics' && <TrendingUp className="w-5 h-5" />}
                    <div>
                      <div className="font-medium">{section.title}</div>
                      <div className="text-sm opacity-75">{section.subtitle}</div>
                    </div>
                  </button>
                ))}
              </nav>
            </div>

            {/* Main Content */}
            <div className="flex-1">
              {activeSection === 'stores' && renderStoresSection()}
              {activeSection === 'malls' && renderMallsSection()}
              {activeSection === 'floors' && renderFloorsSection()}
              {activeSection === 'promotions' && renderPromotionsSection()}
              {activeSection === 'events' && renderEventsSection()}
              {activeSection === 'analytics' && renderAnalyticsSection()}
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

export default AdminPanel;

