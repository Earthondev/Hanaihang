name: QA

on:
  pull_request:
  workflow_dispatch:

concurrency:
  group: qa-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      base_url: ${{ steps.resolve.outputs.base_url }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - run: npm ci

      # üß† ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à BASE_URL ‡πÉ‡∏ô shell ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô "outputs"
      # Prefer Netlify Deploy Preview URL from PR comments, then fallback:
      #   secret ‚Üí var ‚Üí default
      - name: Resolve BASE_URL (prefer Netlify Preview)
        id: resolve
        env:
          QA_BASE_URL_SECRET: ${{ secrets.QA_BASE_URL }}
          QA_BASE_URL_VAR:    ${{ vars.QA_BASE_URL }}
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            // 1) Try to find Netlify preview URL in PR comments (only on pull_request)
            let preview = '';
            if (context.eventName === 'pull_request') {
              const pr = context.payload.pull_request.number;
              const comments = await github.paginate(
                github.rest.issues.listComments,
                { owner, repo, issue_number: pr, per_page: 100 }
              );
              const body = comments.map(c => c.body || '').join('\n');
              // Match patterns like: https://deploy-preview-123--site-name.netlify.app
              // or https://feat-abc--site-name.netlify.app
              const re = /https:\/\/[a-z0-9-]+--[a-z0-9-]+\.netlify\.app/gi;
              const matches = body.match(re);
              if (matches && matches.length) {
                preview = matches[matches.length - 1]; // use the last (most recent) match
                core.info(`Found Netlify preview in PR comments: ${preview}`);
              } else {
                core.info('No Netlify preview URL found in PR comments.');
              }
            }
            // 2) Fallback: secret ‚Üí var ‚Üí default
            const secret = process.env.QA_BASE_URL_SECRET || '';
            const vari   = process.env.QA_BASE_URL_VAR    || '';
            const base   = preview || secret || vari || 'https://hanaihang.netlify.app';
            const src    = preview ? 'netlify-preview' : (secret ? 'secret' : (vari ? 'var' : 'default'));
            core.info(`Resolved BASE_URL from ${src}: ${base}`);
            core.setOutput('base_url', base);

  e2e:
    needs: setup
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      BASE_URL: ${{ needs.setup.outputs.base_url }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: 
          node-version: 20
          cache: 'npm'
      - run: npm ci
      - run: npx playwright install --with-deps
      - name: Assert BASE_URL not empty
        run: |
          test -n "${BASE_URL}" || { echo "BASE_URL is empty"; exit 1; }
          echo "Using BASE_URL=${BASE_URL}"
      - name: Run Playwright E2E
        run: npm run test:e2e
      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-${{ github.sha }}
          path: playwright-report/
          if-no-files-found: ignore
      - name: Upload Playwright traces
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-traces-${{ github.sha }}
          path: test-results/
          if-no-files-found: ignore

  audits:
    needs: setup
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      BASE_URL: ${{ needs.setup.outputs.base_url }}
    outputs:
      mobile_perf: ${{ steps.score.outputs.mobile_perf }}
      mobile_a11y: ${{ steps.score.outputs.mobile_a11y }}
      mobile_bp:   ${{ steps.score.outputs.mobile_bp }}
      mobile_seo:  ${{ steps.score.outputs.mobile_seo }}
      desktop_perf: ${{ steps.score.outputs.desktop_perf }}
      desktop_a11y: ${{ steps.score.outputs.desktop_a11y }}
      desktop_bp:   ${{ steps.score.outputs.desktop_bp }}
      desktop_seo:  ${{ steps.score.outputs.desktop_seo }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: 
          node-version: 20
          cache: 'npm'
      - run: npm ci
      - name: Ensure artifacts directory
        run: mkdir -p artifacts/pa11y artifacts/lh
      - name: Assert BASE_URL not empty
        run: |
          test -n "${BASE_URL}" || { echo "BASE_URL is empty"; exit 1; }
          echo "Using BASE_URL=${BASE_URL}"
      - name: Lighthouse (mobile)
        run: npm run lh:mobile
      - name: Lighthouse (desktop)
        run: npm run lh:desktop
      - name: Upload Lighthouse artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-json-${{ github.sha }}
          path: artifacts/*
      - name: Extract Lighthouse scores
        id: score
        run: |
          MOBILE=artifacts/lh-mobile.json
          DESKTOP=artifacts/lh-desktop.json
          parse () {
            jq -r '
              (.categories.performance.score        *100|round) as $perf |
              (.categories.accessibility.score      *100|round) as $a11y |
              (.categories["best-practices"].score  *100|round) as $bp   |
              (.categories.seo.score                *100|round) as $seo  |
              @sh "PERF=\($perf) A11Y=\($a11y) BP=\($bp) SEO=\($seo)"
            ' "$1"
          }
          eval "$(parse "$MOBILE")"; echo "mobile_perf=$PERF"   >> $GITHUB_OUTPUT; echo "mobile_a11y=$A11Y" >> $GITHUB_OUTPUT; echo "mobile_bp=$BP" >> $GITHUB_OUTPUT; echo "mobile_seo=$SEO" >> $GITHUB_OUTPUT
          eval "$(parse "$DESKTOP")"; echo "desktop_perf=$PERF" >> $GITHUB_OUTPUT; echo "desktop_a11y=$A11Y" >> $GITHUB_OUTPUT; echo "desktop_bp=$BP" >> $GITHUB_OUTPUT; echo "desktop_seo=$SEO" >> $GITHUB_OUTPUT

  a11y:
    needs: setup
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      BASE_URL: ${{ needs.setup.outputs.base_url }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: 
          node-version: 20
          cache: 'npm'
      - run: npm ci
      - name: Ensure artifacts directory
        run: mkdir -p artifacts/pa11y artifacts/lh
      - name: Assert BASE_URL not empty
        run: |
          test -n "${BASE_URL}" || { echo "BASE_URL is empty"; exit 1; }
          echo "Using BASE_URL=${BASE_URL}"
      - name: Create pa11y config with Chrome launch args
        run: |
          echo "Using BASE_URL: ${BASE_URL}"
          cat > .pa11yci.json << EOF
          {
            "defaults": {
              "standard": "WCAG2AA",
              "timeout": 120000,
              "screenCapture": "artifacts/pa11y/screenshot.png",
              "hideElements": ".sr-only,[aria-hidden='true']",
              "chromeLaunchConfig": {
                "args": ["--no-sandbox", "--disable-setuid-sandbox", "--disable-dev-shm-usage", "--disable-gpu"]
              }
            },
            "urls": [
              "${BASE_URL}",
              "${BASE_URL}/admin",
              "${BASE_URL}/admin?tab=malls",
              "${BASE_URL}/admin?tab=stores"
            ]
          }
          EOF
          echo "Created .pa11yci.json with Chrome launch args"
      - name: Run Pa11y (with no-sandbox & JSON)
        id: pa11y
        run: |
          set +e
          npx pa11y-ci -c .pa11yci.json \
            --chrome-arg="--no-sandbox" \
            --chrome-arg="--disable-setuid-sandbox" \
            --reporter json > artifacts/pa11y/results.json
          EXIT=$?
          echo "PA11Y_EXIT=$EXIT" >> $GITHUB_ENV
          exit 0
      - name: Upload Pa11y artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pa11y-artifacts-${{ github.sha }}
          path: artifacts/pa11y/
          if-no-files-found: warn
      - name: Fail if Pa11y had errors
        if: env.PA11Y_EXIT != '0'
        run: |
          echo "Pa11y reported errors. See artifacts/results.json for details."
          if [ -f artifacts/pa11y/results.json ]; then
            echo "=== Pa11y Results Summary ==="
            jq -r '.results[] | "URL: \(.documentTitle)\nErrors: \(.issues.errors | length)\nWarnings: \(.issues.warnings | length)\nNotices: \(.issues.notices | length)\n"' artifacts/pa11y/results.json
          fi
          exit 1

  gate:
    needs: [e2e, audits, a11y]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      - name: Compute & enforce thresholds
        id: enforce
        env:
          MP:  ${{ needs.audits.outputs.mobile_perf }}
          MA:  ${{ needs.audits.outputs.mobile_a11y }}
          MBP: ${{ needs.audits.outputs.mobile_bp }}
          MS:  ${{ needs.audits.outputs.mobile_seo }}
          DP:  ${{ needs.audits.outputs.desktop_perf }}
          DA:  ${{ needs.audits.outputs.desktop_a11y }}
          DBP: ${{ needs.audits.outputs.desktop_bp }}
          DS:  ${{ needs.audits.outputs.desktop_seo }}
          TH_PERF: 85
          TH_A11Y: 90
          TH_BP:   90
          TH_SEO:  90
        run: |
          echo "Mobile  -> Perf:$MP  A11y:$MA  BP:$MBP  SEO:$MS"
          echo "Desktop -> Perf:$DP  A11y:$DA  BP:$DBP  SEO:$DS"
          
          fail=0
          check () { name=$1 val=$2 th=$3; [ "${val:-0}" -ge "$th" ] || { echo "‚ùå $name < $th (got $val)"; fail=1; }; }
          check "Mobile Performance"      "$MP"  "$TH_PERF"
          check "Mobile Accessibility"    "$MA"  "$TH_A11Y"
          check "Mobile Best Practices"   "$MBP" "$TH_BP"
          check "Mobile SEO"              "$MS"  "$TH_SEO"
          check "Desktop Performance"     "$DP"  "$TH_PERF"
          check "Desktop Accessibility"   "$DA"  "$TH_A11Y"
          check "Desktop Best Practices"  "$DBP" "$TH_BP"
          check "Desktop SEO"             "$DS"  "$TH_SEO"
          [ $fail -eq 0 ] || exit 1

      - name: Post QA summary to PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const o = {
              MP:  process.env.MP,  MA:  process.env.MA,  MBP: process.env.MBP, MS:  process.env.MS,
              DP:  process.env.DP,  DA:  process.env.DA,  DBP: process.env.DBP, DS:  process.env.DS
            };
            core.summary.addHeading('QA Checks ‚úÖ');
            core.summary.addTable([
              [{data:'Target',header:true},{data:'Perf',header:true},{data:'A11y',header:true},{data:'BP',header:true},{data:'SEO',header:true}],
              ['Mobile',  o.MP,  o.MA,  o.MBP,  o.MS],
              ['Desktop', o.DP,  o.DA,  o.DBP,  o.DS],
            ]);
            await core.summary.write();
      
      - name: Comment QA result to PR
        if: github.event_name == 'pull_request'
        uses: thollander/actions-comment-pull-request@v2
        with:
          message: |
            **QA Checks ‚úÖ**
            | Target  | Perf | A11y | BP | SEO |
            |---------|------|------|----|-----|
            | Mobile  | ${{ needs.audits.outputs.mobile_perf }} | ${{ needs.audits.outputs.mobile_a11y }} | ${{ needs.audits.outputs.mobile_bp }} | ${{ needs.audits.outputs.mobile_seo }} |
            | Desktop | ${{ needs.audits.outputs.desktop_perf }} | ${{ needs.audits.outputs.desktop_a11y }} | ${{ needs.audits.outputs.desktop_bp }} | ${{ needs.audits.outputs.desktop_seo }} |

